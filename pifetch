#!/bin/bash

user=$(whoami)
exhibition_bool=0
force_sup=0


if [ ! -d /home/$user/.config/pifetch ]; then
  if [ ! -d /home/$user/.config ]; then
    mkdir /home/$user/.config
  fi
  mkdir /home/$user/.config/pifetch
fi
if [ -f /home/$user/.config/pifetch/config.conf ]; then
  config_file="/home/$user/.config/pifetch/config.conf"
else
  if [ ! "$1" == "-config" ]; then
    echo -e "It is recommended that you make a config file first for this, you can do that by running:\n\n   ./pifetch -config\n\nIn the git repo directory"
    exit
  fi
fi
if [ ! -d /home/$user/Pictures/pifetch_images ]; then
  if [ ! -d /home/$user/Pictures ]; then
    mkdir /home/$user/Pictures
  fi
  mkdir /home/$user/Pictures/pifetch_images
fi

if [ ! "$1" == "-config" ]; then
  source $config_file #We set this as a variable so that we can source it again later
fi

# Gets the current size of the terminal
get_window_size() {
    if [[ "$image_backend" == "tycat" ]]; then
        printf '%b' '\e}qs\000'

    elif [[ -z $VTE_VERSION ]]; then
        case ${TMUX:-null} in
            "null") printf '%b' '\e[14t' ;;
            *)      printf '%b' '\ePtmux;\e\e[14t\e\\ ' ;;
        esac
    fi

    case $bash_version in
        4|5) IFS=';t' read -d t -t 0.05 -sra term_size ;;
        *)   IFS=';t' read -d t -t 1 -sra term_size ;;
    esac
    unset IFS

    # Split the string into height/width.
    if [[ "$image_backend" == "tycat" ]]; then
        term_width="$((term_size[2] * term_size[0]))"
        term_height="$((term_size[3] * term_size[1]))"

    else
        term_height="${term_size[1]}"
        term_width="${term_size[2]}"
    fi

    # Get terminal width/height.
    if (( "${term_width:-0}" < 50 )) && [[ "$DISPLAY" && $os != "Mac OS X" && $os != "macOS" ]]; then
        if type -p xdotool &>/dev/null; then
            IFS=$'\n' read -d "" -ra win \
                <<< "$(xdotool getactivewindow getwindowgeometry --shell %1)"
            term_width="${win[3]/WIDTH=}"
            term_height="${win[4]/HEIGHT=}"

        elif type -p xwininfo &>/dev/null; then
            # Get the focused window's ID.
            if type -p xdo &>/dev/null; then
                current_window="$(xdo id)"

            elif type -p xprop &>/dev/null; then
                current_window="$(xprop -root _NET_ACTIVE_WINDOW)"
                current_window="${current_window##* }"

            elif type -p xdpyinfo &>/dev/null; then
                current_window="$(xdpyinfo | grep -F "focus:")"
                current_window="${current_window/*window }"
                current_window="${current_window/,*}"
            fi

            # If the ID was found get the window size.
            if [[ "$current_window" ]]; then
                term_size=("$(xwininfo -id "$current_window")")
                term_width="${term_size[0]#*Width: }"
                term_width="${term_width/$'\n'*}"
                term_height="${term_size[0]/*Height: }"
                term_height="${term_height/$'\n'*}"
            fi
        fi
    fi

    term_width="${term_width:-0}"
}

find_valid_image() {
  bad_image=0
  image_file=$(find $image_dir -type f | shuf -n 1)
  if test -f "$selected_image"; then
    # echo -e "Piped image: $selected_image"
    image_file="$selected_image"
  fi
  if [ $exhibition_bool == 0 ]; then
    for IMAGE in ${naughty_images[@]}; do
      if [[ "$image_dir/$IMAGE" == "$image_file" ]]; then bad_image=1; fi
    done
  fi
  if [[ $bad_image == 1 ]] || [[ ! -f $image_file ]]; then
    find_valid_image
  fi
  image_file_extension="${image_file##*.}"
  # echo $image_file
  case "$image_file_extension" in
      gif)
        image_height=$(file $image_file | awk '{print $7}')
        image_width=$(file $image_file | awk '{print $9}')
        if [[ $image_height -gt 400 ]]; then
          # echo "Image is too big for terminal"
          find_valid_image
        fi
        ;;
      png)
        image_height=$(file $image_file | awk '{print $7}')
        image_width=$(file $image_file | awk '{print $5}')
        image_height=${image_height:0:-1}
        # if [[ $image_height -lt 400 ]]; then
        #   big_image=1
        # fi
        ;;
      jpeg | jpg)
        image_dimensions=$(file $image_file | awk '{print $18}')
        if [[ $image_dimensions == "" ]]; then
          image_dimensions=$(file $image_file | awk '{print $15}')
        fi
        image_height=$(echo "$image_dimensions" | sed 's/x/ /' | awk '{print $1}')
        image_width=$(echo "$image_dimensions" | sed 's/x/ /' | awk '{print $2}')
        # echo "jpg height: $image_height"
        # echo "jpg width: $image_width"
        # echo "jpg dim: $image_dimensions"
        # echo "file info: $(file $image_file)" 
        image_width=${image_width:0:-1}
        # if [[ $image_height -lt 400 ]]; then
        #   big_image=1
        # fi
        ;;
      *)
        find_valid_image
  esac
}

if [ -f "$1" ]; then
  selected_image="$1"
  exhibition_bool=1
fi
if [ -d "$1" ]; then
  image_dir="$1"
fi

# I need to add more of these later on
case "$1" in 
  --help)
    echo "
    Pifetch options:

    -h | --help                 Displays this help option
    -e | --explicit             Will ignore the blacklist and include all images in the selected image directory
    -config                     Will reset your config file to the base configurations
    image.[png|gif|jpg|jpeg]    Will use pifetch for the specific image that you pick (usage: \"pifetch /path/to/image\")
    /path/to/dir                Will use images from the directory that you chose (usage: \"pifetch /path/to/dir\")

    If you would like to modify or change the configuration of this, modify your changes in the pifetch script/program itself at the top couple lines (I havent made a dedicated config file yet)
    "
    exit
    ;;
  -e|--explicit)
    exhibition_bool=1
    shift;;
  -config) # Creates the config file that the user can create out of the base config
    cp conf/basic_config.conf /home/$user/.config/pifetch/config.conf
    exit;;
  -sup)
    # Testing images for supplemental image spacing
    force_sup=1
    selected_image=$(cat image_cache.log)
    exhibition_bool=1

esac

find_valid_image
echo "$image_file" > image_cache.log

re='^[0-9]+$'
if [[ ! $image_width =~ $re ]] || [[ $force_sup == 1 ]]; then
  image_width=$(identify -format "%w" "$image_file")
  echo "Supw"
fi
if [[ ! $image_height =~ $re ]] || [[ $force_sup == 1 ]]; then
  image_height=$(identify -format "%h" "$image_file")
  echo "Suph"
fi

if [[ $image_height -gt 400 ]] && [[ $image_file_extension == "gif" ]]; then
  echo "Gif size is too big for terminal"
  exit;
fi

info_echo_amount=$((image_width/9))
if [[ $info_echo_amount -gt 50 ]]; then
  info_echo_amount=50
fi
echo_amount=$((image_height/20))
if [[ $echo_amount -gt 20 ]]; then
  echo_amount=20
fi
if [[ $image_height != $image_width ]]; then # If the image is very large, it may be necessary to calculate the scale of the image to find out how much to echo the image from the user input
  scaley=$(echo "scale=4; $image_height / $image_width" | bc)
  echo_amount=$(echo "scale=0; $echo_amount * $scaley / 1" | bc)
  echo_amount=$((echo_amount+1))
  # echo "Math: $echo_amount"
fi

#echo -e "echo amount: $echo_amount"
#echo -e "info echo amount: $info_echo_amount"

echo "Height: $image_height"
echo "Width: $image_width"

# echo $image_file
# echo $1
if [ "$image_file_extension" == "gif" ]; then
  echo "loading gif"
fi

get_window_size

fetch_height=20
fetch_width=20

fetch_height_ratio=$((term_height/400))
fetch_width_ratio=$((term_width/400))

echo "H term $term_height"
echo "W term $term_width"

if [ $fetch_height_ratio == 0 ]; then
  fetch_height_ratio=1
fi
if [ $fetch_width_ratio == 0 ]; then
  fetch_width_ratio=1
fi
echo "H ratio $fetch_height_ratio"
echo "W ratio $fetch_width_ratio"

if [ $fetch_height_ratio -gt $fetch_width_ratio ]; then
  echo_ratio=$fetch_height_ratio
else
  echo_ratio=$fetch_width_ratio
fi

source $config_file # Allows for data about the image that was chosen to be included in the fetch

clear
kitty +kitten icat --align left --scale-up --place "$((fetch_height*fetch_height_ratio))x$((fetch_width*fetch_width_ratio))@-100x-100" "$image_file"
for info in $(seq 0 2 ${#info_stuff[@]}); do
  for i in $(seq 0 $((echo_ratio*10+1))); do
    printf "%s " ""
  done
  sleep 0.01
  # (DefFont) and (Fontreset) are used to color format the output, they can be replaced witht the other colors you find at the top of this prognam
  echo -e "  $DefFont${info_stuff[info]}$Fontreset${info_stuff[$((info+1))]}"
done

echo_amount=$((echo_ratio)) # It would be 25, but I want another space between the image and the user input in the terminal
tmp_echo_amount=$((echo_ratio))
image_offset=$(echo "scale=3; $image_height / $image_width" | bc)
echo_amount=$(echo "scale=0; ($image_offset * $echo_amount) / 1" | bc)

#echo "pre-echo amount: $echo_amount"

#echo_reduction=${#info_stuff[@]}
echo_reduction=0
echo_amount=$((echo_amount-echo_reduction))
tmp_echo_amount=$((tmp_echo_amount-echo_reduction))

#echo "echo amount: $echo_amount"
#echo "tmpecho amount: $tmp_echo_amount"

for i in $(seq 0 $echo_amount); do echo; done

